import { PSNService } from './psnService';
import { FirebaseService } from './firebaseService';


export class SyncService {
  private static isSyncing = false;
  private static syncInterval: NodeJS.Timeout | null = null;
  
  /**
   * Sincronizar todos os dados do PSN para Firebase
   */
  static async syncAllData(): Promise<void> {
    if (this.isSyncing) {
      console.log('üîÑ Sincroniza√ß√£o j√° em andamento...');
      return;
    }
    
    try {
      this.isSyncing = true;
      console.log('üöÄ Iniciando sincroniza√ß√£o completa PSN ‚Üí Firebase...');
      
      // 1. Sincronizar perfil do usu√°rio
      await this.syncProfileData();
      
      // 2. Sincronizar lista de jogos
      await this.syncTrophyTitles();
      
      // 3. Sincronizar trof√©us dos jogos (primeiros 5 para n√£o sobrecarregar)
      await this.syncTopGamesTrophies();
      
      console.log('‚úÖ Sincroniza√ß√£o completa conclu√≠da!');
      
    } catch (error) {
      console.error('‚ùå Erro na sincroniza√ß√£o:', error);
    } finally {
      this.isSyncing = false;
    }
  }
  
  /**
   * Sincronizar dados do perfil
   */
  private static async syncProfileData(): Promise<void> {
    try {
      console.log('üë§ Sincronizando perfil do usu√°rio...');
      const profile = await PSNService.getProfileSummary();
      
      if (profile) {
        // Salvar perfil no Firebase (voc√™ pode criar uma cole√ß√£o 'userProfiles')
        console.log('‚úÖ Perfil sincronizado:', profile.trophyLevel);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar perfil:', error);
    }
  }
  
  /**
   * Sincronizar lista de jogos
   */
  private static async syncTrophyTitles(): Promise<void> {
    try {
      console.log('üéÆ Sincronizando lista de jogos...');
      const trophyTitles = await PSNService.getTrophyTitles();
      
      if (trophyTitles.length > 0) {
        await FirebaseService.syncTrophyTitles(trophyTitles);
        console.log(`‚úÖ ${trophyTitles.length} jogos sincronizados com Firebase`);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar jogos:', error);
    }
  }
  
  /**
   * Sincronizar trof√©us dos jogos mais importantes
   */
  private static async syncTopGamesTrophies(): Promise<void> {
    try {
      console.log('üèÜ Sincronizando trof√©us dos jogos principais...');
      const trophyTitles = await PSNService.getTrophyTitles();
      
      // Pegar apenas os primeiros 5 jogos para n√£o sobrecarregar
      const topGames = trophyTitles.slice(0, 5);
      
      for (const game of topGames) {
        try {
          console.log(`üîÑ Sincronizando trof√©us de: ${game.trophyTitleName}`);
          const trophies = await PSNService.getTrophiesForTitle(game.npTitleId);
          
          if (trophies.length > 0) {
            await FirebaseService.syncTrophiesForGame(game.npTitleId, trophies);
            console.log(`‚úÖ ${trophies.length} trof√©us sincronizados para ${game.trophyTitleName}`);
          }
          
          // Pequena pausa para n√£o sobrecarregar a API
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          console.error(`‚ùå Erro ao sincronizar trof√©us de ${game.trophyTitleName}:`, error);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar trof√©us:', error);
    }
  }
  
  /**
   * Sincronizar um jogo espec√≠fico
   */
  static async syncSingleGame(npTitleId: string): Promise<void> {
    try {
      console.log(`üéÆ Sincronizando jogo espec√≠fico: ${npTitleId}`);
      
      const trophies = await PSNService.getTrophiesForTitle(npTitleId);
      
      if (trophies.length > 0) {
        await FirebaseService.syncTrophiesForGame(npTitleId, trophies);
        console.log(`‚úÖ ${trophies.length} trof√©us sincronizados`);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar jogo espec√≠fico:', error);
    }
  }
  
  /**
   * Verificar se h√° atualiza√ß√µes dispon√≠veis
   */
  static async checkForUpdates(): Promise<boolean> {
    try {
      // Aqui voc√™ pode implementar l√≥gica para verificar se h√° novos dados
      // Por exemplo, comparar timestamps de √∫ltima sincroniza√ß√£o
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao verificar atualiza√ß√µes:', error);
      return false;
    }
  }
  
  /**
   * Configurar sincroniza√ß√£o autom√°tica
   */
  static setupAutoSync(intervalMinutes: number = 30): void {
    if (this.syncInterval) {
      this.stopAutoSync();
    }
    
    console.log(`‚è∞ Configurando sincroniza√ß√£o autom√°tica a cada ${intervalMinutes} minutos`);
    
    this.syncInterval = setInterval(async () => {
      console.log('üîÑ Executando sincroniza√ß√£o autom√°tica...');
      await this.syncAllData();
    }, intervalMinutes * 60 * 1000);
  }
  
  /**
   * Parar sincroniza√ß√£o autom√°tica
   */
  static stopAutoSync(): void {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
      console.log('‚èπÔ∏è Sincroniza√ß√£o autom√°tica parada');
    }
  }
  
  /**
   * Obter status da sincroniza√ß√£o
   */
  static getSyncStatus(): { isSyncing: boolean; hasAutoSync: boolean } {
    return {
      isSyncing: this.isSyncing,
      hasAutoSync: !!this.syncInterval
    };
  }
}
